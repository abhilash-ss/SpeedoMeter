{"version":3,"sources":["components/SpeedoMeter/SpeedoMeterBase.tsx","components/SpeedoMeter/SpeedoMeter.ts","components/SpeedoMeter/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["circleConfig","SpeedoMeterBase","className","strokeColor","strokeWidth","innerText","legendText","percentage","trailStrokeWidth","trailStrokeColor","trailSpaced","speed","useState","progressBar","setProgressBar","count","setCount","pace","updatePercentage","setTimeout","useEffect","viewBox","cx","cy","r","fill","stroke","strokeDasharray","strokeDashoffset","x","y","aria-hidden","role","SpeedoMeter","styled","props","maxSize","textColor","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAUMA,EACK,YADLA,EAED,KAFCA,EAGD,KAHCA,EAIG,oBAoGMC,EApFS,SAAC,GAWV,IAVbC,EAUY,EAVZA,UACAC,EASY,EATZA,YASY,IARZC,mBAQY,MARE,EAQF,EAPZC,EAOY,EAPZA,UAOY,IANZC,kBAMY,MANC,GAMD,MALZC,kBAKY,MALC,EAKD,MAJZC,wBAIY,MAJO,EAIP,EAHZC,EAGY,EAHZA,iBACAC,EAEY,EAFZA,YAEY,IADZC,aACY,MADJ,GACI,IAC0BC,mBAAS,GADnC,mBACLC,EADK,KACQC,EADR,OAEcF,mBAAS,GAFvB,mBAELG,EAFK,KAEEC,EAFF,KAGNC,EAAOV,EAAaI,EACpBO,EAAmB,WACvBC,YAAW,WACTL,EAAeD,EAAc,MAC7BG,EAASD,EAAQ,KAChBE,IAWL,OARAG,qBAAU,WACJb,EAAa,GAAGW,MACnB,CAACX,IAEJa,qBAAU,WACJP,EAAcN,GAAYW,MAC7B,CAACL,IAGF,yBAAQX,UAAWA,EAAnB,UACE,sBAAKmB,QAASrB,EAAd,UACE,wBACEE,UAAU,aACVoB,GAAItB,EACJuB,GAAIvB,EACJwB,EAAGxB,EACHyB,KAAK,cACLC,OAAQjB,EACRL,YAAaI,EACbmB,gBAAiBjB,EAAc,EAAI,IAGrC,wBACER,UAAU,gBACVoB,GAAItB,EACJuB,GAAIvB,EACJwB,EAAGxB,EACHyB,KAAK,cACLC,OAAQvB,EACRC,YAAaA,EACbuB,gBAAe,UAAKd,EAAL,YAAoB,IAAMA,GACzCe,iBA1Ea,KA6Ef,oBAAG1B,UAAU,aAAb,UACE,sBAAM2B,EAAE,MAAMC,EAAE,MAAM5B,UAAU,eAAhC,SAEGa,IAEH,sBAAMc,EAAE,MAAMC,EAAE,MAAM5B,UAAU,cAAhC,SACGG,UAINC,GACC,4BAAYJ,UAAU,aAAtB,SACE,oBACEA,UAAU,kBACV6B,cAAY,OACZC,KAAK,eAHP,SAKE,+BACE,sBAAM9B,UAAU,iBAChB,+BAAOI,e,23BC/FrB,IAAM2B,EAAcC,YAAOjC,EAAPiC,CAAH,KACF,SAACC,GAAD,OAAmBA,EAAMC,WAQ5B,SAACD,GAAD,OAAmBA,EAAME,aAkCb,SAACF,GAAD,OAAmBA,EAAMhC,eAKjD8B,EAAYK,aAAe,CACzBD,UAAW,QACXlC,YAAa,aACbiC,QAAS,SAGIH,IC9DAA,ED8DAA,E,ME/CAM,MAbf,WACE,OACE,qBAAKrC,UAAU,MAAf,SACE,cAAC,EAAD,CACEO,iBAAiB,UACjBN,YAAY,UACZI,WAAY,GACZF,UAAU,WCGHmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2371f475.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\ninterface ICircleConfig {\n  viewBox: string;\n  x: string;\n  y: string;\n  radio: string;\n}\n\nconst INITIAL_OFFSET = 65;\nconst circleConfig: ICircleConfig = {\n  viewBox: \"0 0 38 38\",\n  x: \"19\",\n  y: \"19\",\n  radio: \"15.91549430918954\",\n};\n\ninterface IProps {\n  className?: string;\n  strokeColor: string;\n  strokeWidth?: number;\n  innerText: string;\n  legendText?: string;\n  percentage: number;\n  trailStrokeWidth?: number;\n  trailStrokeColor: string;\n  trailSpaced?: boolean;\n  speed?: number;\n}\n\nconst SpeedoMeterBase = ({\n  className,\n  strokeColor,\n  strokeWidth = 1,\n  innerText,\n  legendText = \"\",\n  percentage = 0,\n  trailStrokeWidth = 1,\n  trailStrokeColor,\n  trailSpaced,\n  speed = 0.1,\n}: IProps) => {\n  const [progressBar, setProgressBar] = useState(0);\n  const [count, setCount] = useState(0);\n  const pace = percentage / speed;\n  const updatePercentage = () => {  \n    setTimeout(() => {\n      setProgressBar(progressBar + 0.182 );\n      setCount(count + 1);\n    }, pace);\n  };\n\n  useEffect(() => {\n    if (percentage > 0) updatePercentage();\n  }, [percentage]);\n\n  useEffect(() => {\n    if (progressBar < percentage) updatePercentage();\n  }, [progressBar]);\n\n  return (\n    <figure className={className}>\n      <svg viewBox={circleConfig.viewBox}>\n        <circle\n          className=\"donut-ring\"\n          cx={circleConfig.x}\n          cy={circleConfig.y}\n          r={circleConfig.radio}\n          fill=\"transparent\"\n          stroke={trailStrokeColor}\n          strokeWidth={trailStrokeWidth}\n          strokeDasharray={trailSpaced ? 1 : 0}\n        />\n\n        <circle\n          className=\"donut-segment\"\n          cx={circleConfig.x}\n          cy={circleConfig.y}\n          r={circleConfig.radio}\n          fill=\"transparent\"\n          stroke={strokeColor}\n          strokeWidth={strokeWidth}\n          strokeDasharray={`${progressBar} ${100 - progressBar}`}\n          strokeDashoffset={INITIAL_OFFSET}\n        />\n\n        <g className=\"chart-text\">\n          <text x=\"50%\" y=\"50%\" className=\"chart-number\">\n            {/* {Number(progressBar)*10} */}\n            {count}\n          </text>\n          <text x=\"50%\" y=\"50%\" className=\"chart-label\">\n            {innerText}\n          </text>\n        </g>\n      </svg>\n      {legendText && (\n        <figcaption className=\"figure-key\">\n          <ul\n            className=\"figure-key-list\"\n            aria-hidden=\"true\"\n            role=\"presentation\"\n          >\n            <li>\n              <span className=\"shape-circle\" />\n              <span>{legendText}</span>\n            </li>\n          </ul>\n        </figcaption>\n      )}\n    </figure>\n  );\n};\n\nexport default SpeedoMeterBase;\n","import styled from \"styled-components\";\n\nimport SpeedoMeterBase from \"./SpeedoMeterBase\";\n\ninterface IProps {\n  textColor?: string;\n  strokeColor: string;\n  maxSize?: string;\n}\n\nconst SpeedoMeter = styled(SpeedoMeterBase)`\n  max-width: ${(props: IProps) => props.maxSize};\n  vertical-align: middle;\n\n  .chart-text {\n    transform: translateY(0.25em);\n  }\n\n  .chart-number {\n    fill: ${(props: IProps) => props.textColor};\n    font-size: 0.6em;\n    line-height: 1;\n    text-anchor: middle;\n    transform: translateY(-0.25em);\n  }\n\n  .chart-label {\n    font-size: 0.2em;\n    fill: #F09934;\n    text-anchor: middle;\n    transform: translateY(0.7em);\n  }\n\n  .figure-key [class*=\"shape-\"] {\n    margin-right: 8px;\n  }\n\n  .figure-key-list {\n    list-style: none;\n    display: flex;\n    justify-content: space-between;\n  }\n\n  .figure-key-list li {\n    margin: 5px auto;\n  }\n\n  .shape-circle {\n    display: inline-block;\n    vertical-align: middle;\n    width: 21px;\n    height: 21px;\n    border-radius: 50%;\n    background-color: ${(props: IProps) => props.strokeColor};\n    text-transform: capitalize;\n  }\n`;\n\nSpeedoMeter.defaultProps = {\n  textColor: \"white\",\n  strokeColor: \"blueviolet\",\n  maxSize: \"100vh\",\n};\n\nexport default SpeedoMeter;\n","import SpeedoMeter from \"./SpeedoMeter\";\n\nexport default SpeedoMeter;\n","import React from \"react\";\nimport SpeedoMeter from \"./components/SpeedoMeter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SpeedoMeter\n        trailStrokeColor=\"#070709\"\n        strokeColor=\"#F09934\"\n        percentage={80}\n        innerText=\"kmh\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}